@using Microsoft.JSInterop
@inject IJSRuntime JSRuntime

<div class="animated-background-container dark-mode">
    <canvas @ref="CanvasRef" id="animated-background-canvas" width="1920" height="1080"></canvas>
</div>

@code {
    private ElementReference CanvasRef;
    private bool IsInitialized = false;
    
    /// <summary>
    /// Initializes the background animation when the component is first rendered.
    /// </summary>
    /// <param name="firstRender">True if this is the first render of the component.</param>
    /// <returns>A task that represents the asynchronous operation.</returns>
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await InitializeBackground();
        }
    }
    
    /// <summary>
    /// Initializes the background animation using JavaScript.
    /// </summary>
    /// <returns>A task that represents the asynchronous operation.</returns>
    private async Task InitializeBackground()
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("initializeBackground", CanvasRef);
            IsInitialized = true;
        }
        catch (Exception)
        {
            // Background animation failed to initialize - this is non-critical
            // The application will continue to function without the background
        }
    }
    
    /// <summary>
    /// Triggers a ripple effect at the specified coordinates.
    /// </summary>
    /// <param name="x">The X coordinate for the ripple effect.</param>
    /// <param name="y">The Y coordinate for the ripple effect.</param>
    /// <returns>A task that represents the asynchronous operation.</returns>
    public async Task TriggerRipple(double x, double y)
    {
        if (IsInitialized)
        {
            try
            {
                await JSRuntime.InvokeVoidAsync("triggerBackgroundRipple", CanvasRef, x, y);
            }
            catch (Exception)
            {
                // Ripple effect failed - this is non-critical
            }
        }
    }
}
