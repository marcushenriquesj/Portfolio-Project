@inject IJSRuntime JSRuntime

<div class="animated-background-container">
    <canvas @ref="CanvasRef" id="background-canvas" width="1920" height="1080"></canvas>
</div>

@code {
    private ElementReference CanvasRef;
    private bool IsDarkMode = false;
    private bool IsInitialized = false;

    [Parameter] public bool DarkMode { get; set; } = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await InitializeCanvas();
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        if (IsInitialized && DarkMode != IsDarkMode)
        {
            IsDarkMode = DarkMode;
            await UpdateTheme();
        }
    }

    private async Task InitializeCanvas()
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("initializeBackgroundAnimation", CanvasRef);
            IsInitialized = true;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error initializing canvas: {ex.Message}");
        }
    }

    private async Task UpdateTheme()
    {
        if (IsInitialized)
        {
            await JSRuntime.InvokeVoidAsync("updateBackgroundTheme", CanvasRef, IsDarkMode);
        }
    }

    public async Task TriggerRipple(double x, double y)
    {
        if (IsInitialized)
        {
            await JSRuntime.InvokeVoidAsync("triggerRipple", CanvasRef, x, y);
        }
    }
}
